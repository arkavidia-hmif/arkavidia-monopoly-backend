# This is a basic workflow to help you get started with Actions

name: Build and Deploy

on:
  push:
    branches: [ develop ]

  create:
    tags:
      - "**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: yarn
      - run: yarn lint:check
  build-staging:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Publish staging image to registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: arkavidia-hmif/arkavidia-monopoly-backend/monopoly-build
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.pkg.github.com
          tags: "latest,staging"
  build-production:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Get tag name
        id: get_tag_name
        if: github.event_name == 'create'
        run: echo ::set-output name=TAG_NAME::"${GITHUB_REF/refs\/tags\//}"
      - name: Publish staging image to registry
        if: github.event_name == 'create'
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: arkavidia-hmif/arkavidia-monopoly-backend/monopoly-build
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.pkg.github.com
          tags: "production,${{ steps.get_tag_name.outputs.TAG_NAME }}"
  deploy:
    runs-on: ubuntu-latest
    needs: [build-staging, build-production]
    steps:
      - name: Run deployment script over SSH
        uses: maddox/actions/ssh@master
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
        with:
          args: "cd /root/ && docker-compose pull && docker-compose up -d"
  
 
